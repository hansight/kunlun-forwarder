/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hansight.kunlun.forwarder.collector.common.model;

import org.apache.avro.AvroRuntimeException;
import org.apache.avro.Schema;
import org.apache.avro.data.RecordBuilder;
import org.apache.avro.specific.SpecificRecord;
import org.apache.avro.specific.SpecificRecordBase;
import org.apache.avro.specific.SpecificRecordBuilderBase;

import java.nio.ByteBuffer;
import java.util.Map;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Event extends SpecificRecordBase implements SpecificRecord {
    public static final Schema SCHEMA$ = new Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"com.hansight.kunlun.collector.common.model\",\"fields\":[{\"name\":\"header\",\"type\":[{\"type\":\"map\",\"values\":\"string\"},\"null\"]},{\"name\":\"body\",\"type\":[\"bytes\",\"null\"]}]}");

    public static Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated
    public Map<CharSequence, CharSequence> header;
    @Deprecated
    public ByteBuffer body;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Event() {
    }

    /**
     * All-args constructor.
     */
    public Event(Map<CharSequence, CharSequence> header, ByteBuffer body) {
        this.header = header;
        this.body = body;
    }

    public Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return header;
            case 1:
                return body;
            default:
                throw new AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                header = (Map<CharSequence, CharSequence>) value$;
                break;
            case 1:
                body = (ByteBuffer) value$;
                break;
            default:
                throw new AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'header' field.
     */
    public Map<CharSequence, CharSequence> getHeader() {
        return header;
    }

    /**
     * Sets the value of the 'header' field.
     *
     * @param value the value to set.
     */
    public void setHeader(Map<CharSequence, CharSequence> value) {
        this.header = value;
    }

    /**
     * Gets the value of the 'body' field.
     */
    public ByteBuffer getBody() {
        return body;
    }

    /**
     * Sets the value of the 'body' field.
     *
     * @param value the value to set.
     */
    public void setBody(ByteBuffer value) {
        this.body = value;
    }

    /**
     * Creates a new Event RecordBuilder
     */
    public static Builder newBuilder() {
        return new Builder();
    }

    /**
     * Creates a new Event RecordBuilder by copying an existing Builder
     */
    public static Builder newBuilder(Builder other) {
        return new Builder(other);
    }

    /**
     * Creates a new Event RecordBuilder by copying an existing Event instance
     */
    public static Builder newBuilder(Event other) {
        return new Builder(other);
    }

    /**
     * RecordBuilder for Event instances.
     */
    public static class Builder extends SpecificRecordBuilderBase<Event>
            implements RecordBuilder<Event> {

        private Map<CharSequence, CharSequence> header;
        private ByteBuffer body;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(Event.SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder
         */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.header)) {
                this.header = data().deepCopy(fields()[0].schema(), other.header);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.body)) {
                this.body = data().deepCopy(fields()[1].schema(), other.body);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing Event instance
         */
        private Builder(Event other) {
            super(Event.SCHEMA$);
            if (isValidValue(fields()[0], other.header)) {
                this.header = data().deepCopy(fields()[0].schema(), other.header);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.body)) {
                this.body = data().deepCopy(fields()[1].schema(), other.body);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'header' field
         */
        public Map<CharSequence, CharSequence> getHeader() {
            return header;
        }

        /**
         * Sets the value of the 'header' field
         */
        public Builder setHeader(Map<CharSequence, CharSequence> value) {
            validate(fields()[0], value);
            this.header = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'header' field has been set
         */
        public boolean hasHeader() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'header' field
         */
        public Builder clearHeader() {
            header = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'body' field
         */
        public ByteBuffer getBody() {
            return body;
        }

        /**
         * Sets the value of the 'body' field
         */
        public Builder setBody(ByteBuffer value) {
            validate(fields()[1], value);
            this.body = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'body' field has been set
         */
        public boolean hasBody() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'body' field
         */
        public Builder clearBody() {
            body = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        public Event build() {
            try {
                Event record = new Event();
                record.header = fieldSetFlags()[0] ? this.header : (Map<CharSequence, CharSequence>) defaultValue(fields()[0]);
                record.body = fieldSetFlags()[1] ? this.body : (ByteBuffer) defaultValue(fields()[1]);
                return record;
            } catch (Exception e) {
                throw new AvroRuntimeException(e);
            }
        }
    }
}
